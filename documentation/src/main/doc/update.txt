== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

If using the RPM: 

. Stop the old service.
. Update the RPM using platform tools (usually +yum+).
. Check if any configuration files needs to be updated (see below, also search for +.rpmnew+ files in /etc/unity-idm).
. Start the new service.
. Carefully check log files for any errors or warnings.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

When using RPM distribution it is enough to update the package with your package manager and restart the server. 

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== From 1.x to 2.0.0

Information about major update from 1.x version to the 2.0.0 version is provided in a separate document under 
<<update-howto-v2.txt#,this address>>.

==== From 2.1.0 to 2.2.0

Version 2.2.0 changes the default organization of configuration files by introducing modules, which can be enabled
with a single statement in the main configuration file. We suggest moving to this approach, 
however the old style of configuration, where all components are directly defined in +unityServer.conf+ 
are still fully supported. In fact the difference is merely in the default organization of configuration files.
 
==== From 2.2.0 to 2.3.0

No configuration changes or manual steps are neccessary

==== From 2.3.0 to 2.4.0

Update should be straightforward as no configuration syntax changes were introduced. Note however that 
there were few important changes in the way how default configuration and server initialization works:

. There is a new +sys:password+ credential that is always defined. Its settings are read only. It is the default
credential: by default configured on initial credential requirements and authenticators. 
It is always used for the initialAdmin user credential (so far an ad-hoc credential was generated).
. Default credentials configuration was moved to its own configuration module +credential.module+ 
and includes only the certificate credential definition. 
. There is a new attributeType config module, activating a new initialization script: 
+scripts/defaultAttributeTypeInitializer.groovy+. The script loads predefined attribute types. You can enable this 
when updating old configuration. The attribute types may be alternatively loaded from Admin UI in Schema management.
. There is a new configuration module  +oauthAuthenticator.module+. It loads a standard configuration of OAuth
web authenticator. The default configuration provided in +conf/modules/oauth/remoteOAuth.properties+ is a good starting 
template.
. As Unity moved to Vaadin 8 all custom themes needs to be re-compiled. In some cases (typically more advanced ones) 
themes may also require a small update, as upstream Vaadin Valo theme was also updated, and some of the components 
has changed.

==== From 2.4.0 to 2.5.0
 
Version 2.5.0 changes significantly DB schema. The migration is automatic, however making a backup and 
performing a trial migration on a DB copy first is highly recommended.

As upstream Vaadin version was updated, it is suggested to rebuild custom themes and widgetsets if are used.

===== Overview

Up to this version notification channel configuration (which was BTW quite dummy as only a single option was possible 
-- the default email channel) was spread around various components. 
From this version it is only configured as a property of a message template, as typically message template is 
different depending on a channel (SMS or email). Migration sets the +default_email+ 
channel for all existing message templates in DB. In effect channel configuration was removed from other 
places in the system:

. registration forms, enquiry forms
. invitations
. password credential reset settings (the +securityCodeMsgTemplate+ property is no longer supported)

Note that this may also influence REST calls if such elements are created automatically.
 
The formerly separate configuration of email attribute and identity confirmations was removed. Instead those settings
can now be made in particular attribute type or identity type configuration. 



===== Configuration syntax changes

. Main +unityServer.conf+ key +unityServer.core.confirmationRequestLimit+ was renamed to 
+unityServer.core.emailConfirmationRequestLimit+
. The message template consumer called so far +PasswordResetCode+ was renamed to +EmailPasswordResetCode+. 
. The message template consumer called so far +Confirmation+ was renamed to +EmailConfirmation+. 
. All message templates must have a new +notificationChannel+ property set. For existing templates channel can be safely set to
+default_email+ (for new one also +default_sms+ is an option).
. _unlikely to beused_ The 'hold on' feature of SAML and OAuth IdP endpoints was dropped. The endpoint's 
configuration option ending with +.assumeForceOnSessionClash+ is not supported anymore and should 
be removed from configurations. The current behaviour is as up to now with this setting set to true (what was the default).  
. _unlikely to be used_ Password credential configuration was significantly changed due to enhancements in the password reset functionality and
introduction of genearl security factor setting. If password credential is configured from a file it is suggested
create a new configuration on the AdminUI and extract the credential config from JSON dump.    

The following example shows an updated configuration of a template used when sending password rest code message:  

----
emailPasswordResetCode.subject.en=Credential reset code
emailPasswordResetCode.consumer=EmailPasswordResetCode
emailPasswordResetCode.notificationChannel=default_email
emailPasswordResetCode.type=HTML
emailPasswordResetCode.bodyFile.en=path/to/template/file.html
----

===== Other changes

. Email identities are now comapred fully case insensitvie.
. Registration form can now be created without any identity parameter. However to make it work at least one identity 
still needs to be set then -- with form automation (e.g. automatically derived from an attribute).
. Password history handling was fixed. Currently history of length 0 allows for updating password even to the same one 
that is changed. Password history of length 1 forbids only the current password on update, etc.
. For email attributes and identities modified by admin (typically in AdminUI) confirmation requests are never sent 
automatically. Instead, if this is needed (unlikely), admin needs to manually trigger sending the confirmation request.   
. For custom Groovy initialization script users only: package +pl.edu.icm.unity.stdext.credential+ was changed to
+pl.edu.icm.unity.stdext.credential.pass+, update the imports section.

==== From 2.5.0 to 2.6.0

Release 2.6.0 brings the following important changes:

* authentication tiles concept is fully replaced by a new column based authentication screen configuration,
* introduction of _authentication flows_ which are the only way to configure two factor authentication,
* refactoring of the _remember me_ functionality.

===== Remember me configuration changes

The +unityServer.core.realms.*.enableRememberMeFor+ option no longer controls whether remember-me feture is 
enabled or not, only the remember time. Only positive values are accepted.

To control the policy a new option was added: +unityServer.core.realms.*.machineRememberPolicy+, which provides
more flexibility. Valid options are +disallow+, +allowFor2ndFactor+ (the default) and +allowForWholeAuthn+. 
The +allowFor2ndFactor+ option is a new feature introduced in Unity 2.6.0.


===== Changes in web endpoints configuration (Admin, Home, SAML IdP, OAuth AS)  

There were numerous changes in configuration of endpoints. All but configuration of authentication screen changes 
(see the last subsection) should be simple to apply or not affecting your deployment.

Options removed from all endpoints:

. +unity.endpoint.web.authenticationTiles.*+ - tiles based organization of the authentication screen was totally dropped.
Insted use the new column based authentication configuration. 

Options removed from SAML endpoints:

. +unity.saml.requester.selectedProviderIconScale+ - removed with no counterpart - it has no use anymore
. +unity.saml.requester.iconScale+ - deprecated since a long time and finally dropped
. +unity.saml.requester.iconScale+ - deprecated since a long time and finally dropped
. +unity.saml.requester.displayName+ - deprecated since a long time and finally dropped
. +unity.saml.requester.providersInRow+ - deprecated since a long time and finally dropped

Options removed from OAuth endpoints:

. +unity.oauth2.client.selectedProviderIconScale+ - removed with no counterpart - it has no use anymore
. +unity.oauth2.client.iconScale+ - deprecated since a long time and finally dropped
. +unity.oauth2.client.displayName+ - deprecated since a long time and finally dropped
. +unity.oauth2.client.providersInRow+ - deprecated since a long time and finally dropped

===== Endpoint authentication configuration in unityServer.conf

Those changes most likely won't affect your installation modified options were very rarely used.

Endpoint authentication is now configured using either individul authenticators (as prevously) or authentication flows.
Authentication flows take over the not supported anymore syntax "authenticator1,authenticator2" and allow for 
configuring multifactor authentication in a more flexible way. Such option should be converted to use 
a flow with mandatory 2nd factor policy. For example a former configuration:

----
...
unityServer.core.endpoints.myE1.endpointAuthenticators=pwdWeb1,smsWeb1;certWeb
...
----

should be converted to:

----
unityServer.core.authenticationFlow.passAndSMS.authenticationFlowName=passAndSMS
unityServer.core.authenticationFlow.passAndSMS.authenticationFlowPolicy=REQUIRE
unityServer.core.authenticationFlow.passAndSMS.firstFactorAuthenticators=pwdWeb1
unityServer.core.authenticationFlow.passAndSMS.secondFactorAuthenticators=smsWeb1

...
unityServer.core.endpoints.myE1.endpointAuthenticators=passAndSMS;certWeb
...
----


Additionally note that endpoint configuration is changed what may affect REST clients or Groovy scripts creating endpoints.
Former +List<AuthenticationOptionDescription>+ was changed to simple +List<String>+ 
with contains authenticator of authentication flow name.


===== Styling changes 

The default style was significantly changed to track authentication screen changes.
If using a custom style it needs to be revised. Hopefully styling the authentication screen should be much easier now.

HTML classess assigned to authentication option widgets were slightly changed: 
former +...AuthenticatorName.optionName+ was changed to +...AuthenticatorName-optionName+ to work around conflicts
of the dot with CSS class nameing.

===== Converting from tiles to columns

The biggest breaking change introduced in 2.6.0 is new way of configuring appearance of the authentication screen.
See <<endpoints-authn>> for details on how to configure the authentication screen the new way. 
Previously the authN screen was organized around 'tiles' were user was only able to select authentication option,
after its selection it was presented in the top part of the screen and was ready for actual authentication 
(e.g. providing password). From 2.6.0 all authentication options are _instantly_ ready to be used. What is more those
are formatted differently and organized in columns. The 'tile' concept was dropped. 

Typically the old tile will be changed into a column. Tiles using the +simple+ mode are simply converted into a column.
Tiles using the old tile mode +table+ (for showing scrollable list of many authentication options) is converted 
also to a regular column, having a new +_GRID+ element. The following example shows how to convert a typical tile: 

----
unity.endpoint.web.authnIconScale=maxHeightSmall
unity.endpoint.web.authenticationTiles.1.tileContents=pwd cert
unity.endpoint.web.authenticationTiles.1.tileMode=simple
unity.endpoint.web.authenticationTiles.1.tileName.pl=Lokalne metody
unity.endpoint.web.authenticationTiles.1.tileName.en=Local authentication
unity.endpoint.web.authenticationTiles.1.tileIconSize=maxHeight50
----

to a column:

----
unity.endpoint.web.authnScreenColumn.1.columnTitle.pl=Lokalne metody
unity.endpoint.web.authnScreenColumn.1.columnTitle.en=Local authentication
unity.endpoint.web.authnScreenColumn.1.columnContents=pwdWeb certWeb
----

Note that in the tiles setup tile contents was using arbitrary prefixes of authenticators 
(so you could use +pwd+ when authenticator was named +pwdWeb+). It is no longer supported, column's contents 
is configured with either full names of authenticators or authenticator with its option 
as +oauthWeb+ for all options of this authenticator or +oauthWeb.google+ for a specific one.

Another common case is that when converting simple tile to a column separators may come handy:

----
unity.endpoint.web.authnScreenOptionsLabel.OR.text=OR

unity.endpoint.web.authnScreenColumn.1.columnTitle=Local authentication
unity.endpoint.web.authnScreenColumn.1.columnContents=pwdWeb _SEPARATOR_OR certWeb
----


==== From 2.6.0 to 2.7.0

Update affects users creating registration forms using REST Admin API. 
Json format of registration form was significantly updated: there is a new syntax of group registration params,
finalization and many new options.

The registration form automation actions setting redirect URL and post submit message are effectless from now on 
and will be removed in subsequent versions. Their invocation will print warning in log. Instead use the new 
finalization feature of registration form, which offers both easier and wider capabilities.
 

==== From 2.7.0 to 2.8.0

Version 2.8.0 introduces simplified and unified authenticators configuration. Authenticators are not 
dependent on endpoint binding (web, REST, ...) - can be used with any supported endpoint type.

The following changes are required in +unityServer.conf+ or in included modules:

. The +...authenticatorType+ option now requires only the checked credential type, i.e. the former trailing 
part +with ...+ should be removed.
. The +...retrievalConfigurationFile+ option is obsolete and should be removed.
. The +...verificatorConfigurationFile+ option should be changed to +...configurationFile+
. If non-empty configuration of credential retrieval UI was used (in JSON file, was available for password, 
SMS and certificate credential) then it must be transformed to properties format and merged into 
a single configuration file of the authenticator. 
. (Optional) If the same verification method was used for multiple authenticators with different retrievals, 
a single one can now be used instead. This will simplify the configuration.
. After update authenticators SHOULD be reloaded from configuration. This is done by default but can be turned off
in +unityServer.conf+ with option +unityServer.core.fullyRecreateEndpointsAROnStartup=false+. If that option
was used it is recommended to turn it off (comment or set to true) - of course after performing all the configuration
updates as described above. Otherwise all authenticators will have their UI settings reset to default values.

   

For example, let's consider former configuration of three authenticators:

----
unityServer.core.authenticators.passwdForWeb.authenticatorName=pwdWeb
unityServer.core.authenticators.passwdForWeb.authenticatorType=password with web-password
unityServer.core.authenticators.passwdForWeb.localCredential=sys:password
unityServer.core.authenticators.passwdForWeb.retrievalConfigurationFile=passwordRetrieval.json

unityServer.core.authenticators.passwdForRest.authenticatorName=pwdRest
unityServer.core.authenticators.passwdForRest.authenticatorType=password with rest-httpbasic
unityServer.core.authenticators.passwdForRest.localCredential=sys:password

unityServer.core.authenticators.ldapPassForWeb.authenticatorName=ldapWeb
unityServer.core.authenticators.ldapPassForWeb.authenticatorType=ldap with web-password
unityServer.core.authenticators.ldapPassForWeb.verificatorConfigurationFile=ldap.properties
unityServer.core.authenticators.ldapPassForWeb.retrievalConfigurationFile=passwordRetrieval-ldap.json
----

Now this configuration can be simplified to two authenticators, as follows:
----
unityServer.core.authenticators.passwd.authenticatorName=passwordAuthn
unityServer.core.authenticators.passwd.authenticatorType=password
unityServer.core.authenticators.passwd.localCredential=sys:password
unityServer.core.authenticators.passwd.configurationFile=passwordRetrieval.properties

unityServer.core.authenticators.ldap.authenticatorName=ldapAuthn
unityServer.core.authenticators.ldap.authenticatorType=ldap
unityServer.core.authenticators.ldap.configurationFile=ldap.properties
----

In this example +passwordAuth+ authenticator can be used instead of former +passwdForWeb+ and +passwdForRest+.

With this release Unity uses a single file to configure authenticator, in properties format. This replaces 
former properties file configuring credential verificator and JSON file configuring retrieval. The former verificator
configuration hasn't changed and (if was already used) is a perfect start for the new unified config. 
If verificator configuration was not used (typical for authenticators using local credential) 
then a new properties file has to be created.
 
Former JSON configuration of credential retrieval must be manually transformed into the new unified
authenticator's properties config. The process should be rather easy as there are only few available
options for retrievals (or are optional so chances are you have used defaults and so have nothing to do), 
and only for the web password, certificate and SMS ones. 

The example below provides a complete list of all available properties for all configurable
so far web retrievals. Of course all are optional, and you should use only those that are matching your authenticator
and are needed. 

----
retrieval.password.name=Password
retrieval.password.name.pl=Hasło
# other language variants can go here
retrieval.password.registrationFormForUnknown=unknownLDAPUsersReg
retrieval.password.enableAssociation=true

retrieval.tls.name=Certificate
# other language variants can go here as in password case
retrieval.sms.logoURL=https://example.com/mylogo.png

retrieval.sms.name=SMS
# other language variants can go here as in password case
retrieval.sms.logoURL=
---- 





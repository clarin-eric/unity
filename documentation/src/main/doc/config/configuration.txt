[id=configuration]
== General server configuration

The server uses two main configuration files: +conf/unityServer.conf+ and +conf/log4j2.xml+. 
There is also a third one, +conf/startup.properties+, which allows for controlling low level Java VM options
(as memory or JVM executable) and for changing the location of the main configuration files mentioned above. 

The +conf/log4j2.xml+ file configures the logging of the server. This is described in the section <<logging>>.

The +conf/unityServer.conf+ file is the main server configuration file. All other additional configuration
files are referenced from it.

Configuration files are loaded at startup. Most of the files (all except of the logging and mail settings) are
quite strictly verified - in case of misconfiguration, syntax errors, or spelling mistakes server prints a loud
error message in log file and (if the error is critical) does not start.

Configuration updates at runtime are handled as follows:

 * +conf/log4j2.xml+ file is automatically reloaded after it is modified (with few seconds latency). 
 It is recorded in the log file.
 * No other file is automatically reloaded after modification. However,
 * configuration of authenticators and endpoints can be reloaded from the Web Admin UI 
 (in the Server Management tab). It is possible to remove, add or reconfigure existing elements.
 * Reconfiguration of the remaining options from the main configuration file and PKI settings 
 requires server restart. Note that most of the features configured in the files can be managed at runtime
 from the Web Admin UI.
 * Note however that the +directory+ and +openssl+ truststores which can be configured in PKI settings 
 allows for automatic updates of their content when trusted certificates or CRLs are added or removed.
 
  
The table showing all the options is quite long, so here we provide a description of the most important parts
of the configuration: 

 * The general server settings (it is always good to review them) include:
 ** The initial admin username and password. After the server is initialized and admin account(s) are 
 set up those options may be removed and used only in emergency case (i.e. when the last admin user remove itself).
 ** Location of the files with configuration of the e-mail subsystem and message templates.
 More information on this topic is included in the subsection <<notifications>>.
 ** Location of Public Key Infrastructure (PKI) configuration file. This is documented separately in the 
 subsection <<pki>>.
 ** Database configuration which is described in the section <<db-conf>>.
 ** Loaders of example contents, which are useful for a quick start.
 ** Configuration of enabled languages.
 ** Selection of the server main truststore and credential, mostly used for SSL. 
 * HTTP server settings, where there are three important settings: hostname and port where the server listens and
 the advertised address, which should be an address or IP via which the server should be reached from Internet. 
 The remaining options of the HTTP server are fairly advanced.
 * Definitions of various artifacts of the server to be loaded: credentials, credential requirements, authenticators, 
endpoints and translation profiles. Note that the credentials, credential requirements and translation profiles 
can be also managed more conveniently with the Web Admin UI.
The configuration of authenticators and endpoints is described in the subsection <<cfg-authenticators>>
and the translation profiles are covered in <<external-idps>>.
 * Finally Unity configuration can contain so called _modules_. Configuration modules are simply a complete 
fragments of related configuration, which can be enabled with a single statement. A few, ready to
use, modules are available in the +conf/modules+ directory. You can also create new ones to maintain clarity in
the customized configuration. An example candidate for a configuration module is a configuration of 
a SAML endpoint, exposing IdP functionality with all related authenticators.    

All Unity configuration files using properties format (with one exception of the +conf/mail.properties+ file) allows
for using includes and variables. Includes are used to implement configuration modules and can be also used to split 
longer configuration files into smaller pieces. The syntax of the include statement is:

 $include.NAME=included/file/path

where NAME is an arbitrary, unique identifier of the include.

Variables allows for reusing configuration values. Variable is referenced in property value as follows:

 some.property=${VAR1}
 
All environment variables and Java system properties are available as configuration variables. What is more, 
custom variables can be defined as follows in the configuration file itself:

 $var.VAR_NAME=Variable value

Note that such defined variables are _available only_ in the file in which they were defined and in all 
files included from it with the +$include+ statement.

A complete options reference follows:

include::../ref-mainServerProperties.txt[]


include::storage.txt[]

include::pki.txt[]

include::authenticators.txt[]

include::flows.txt[]

include::http-server.txt[]

include::notifications.txt[]

include::realms.txt[]

include::logging.txt[]


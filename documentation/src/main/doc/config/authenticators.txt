[[cfg-authenticators]]
=== Authenticators

[NOTE]
Credential types and credential requirements can be configured in the Web Admin UI, so we skip 
a description of their configuration in the configuration files.

Authenticators define different ways of authentication offered to end users. 
Each authenticator uses a fixed authentication technology as local password verification or 
remote OAuth authentication. Authenticator can provide one or more authentication options. This latter situation
holds when authenticator allows a user to select among different identity providers. For instance OAuth authenticator
can allow for selection of user's identity provider as Google or Facebook. Sometimes more complex deployments 
may facilitate several authenticators of a single technology, when different Unity endpoints require different
authentication settings (e.g. consumer-oriented endpoint may use SAML authentication in public SAML federation while
admin-oriented endpoint may use SAML authentication in corporate federation).    

Authenticators and endpoints as of now can be configured only in the configuration file. Endpoints 
are covered in a separate section <<endpoints>>. The <<endpoints>> section covers also how to configure 
authentication screen, i.e. the visual composition of authentication options which is defined per endpoint. 
Here we cover only the functional definitions of authenticators, which can be used with many endpoints 
in various configurations. 

Authenticators are added either directly to endpoints or are tied together in authentication flows, what allows 
for flexible control of multi-factor authentication. The endpoint must have at least 
one authenticator or flow associated and can have more when alternative or multi-credential authentication 
scenarios are implemented. 

Example configuration of an authenticator:

-----
unityServer.core.authenticators.pass.authenticatorName=securePass
unityServer.core.authenticators.pass.authenticatorType=password
unityServer.core.authenticators.pass.localCredential=secured password
unityServer.core.authenticators.pass.configurationFile=conf/password-config.properties
-----  

The name of the authenticator is an arbitrary, unique string. The type is the most important part:
it defines the name of the authentication technology to be used. The following table lists supported technologies. 

[cols="m,n,n", options="header"]
|====
|Authn technology	| Works with		| Description 
|password			| Password 			| Local verification
|ldap				| Password			| External verification, uses LDAP.
|ldap-cert			| X.509 certificate	| External verification, uses LDAP to resolve attributes of a given certificate subject.
|certificate		| X.509 certificate | Local verification
|saml2				| SAML assertions 	| External verification, interacts via associated retrieval with a remote SAML IdP.
|oauth2				| OAuth tokens		| External verification, using OAuth Authorization Server or OpenID Connect provider. 
|oauth-rp			| OAuth access token| External verification, using OAuth Authorization Server or OpenID Connect provider.
|jwt				| JWT			 	| Local verification, not bound to any local credential. Validated tokens are self contained.
|==== 
 
Authenticator typically require a configuration file. In that file details of how to collect and check the credential 
can be specified. Note that for local authenticators (i.e. checking the credential internally, without help of
external service) must be associated with an existing local credential, and configuration of authenticator 
is typically minimal or even empty: verification process is defined by the local credential settings, and the only 
things that can be configured for authenticator are UI details like a label to be used on password retrieval text field.

More complex configuration of external authenticators is covered in the section <<external-idps>>. 

Configuration of credential retrievals follows. Note that this configuration is universal for all authenticators 
that use the credential in question, e.g. password retrieval settings below can be used both with
+password+ and +ldap+ authentication technologies.

The password retrieval options:

include::../ref-PasswordRetrievalProperties.txt[]

The SMS retrieval options:

include::../ref-SMSRetrievalProperties.txt[]

The X.509 certificate retrieval options:

include::../ref-TLSRetrievalProperties.txt[]



The +jwt+ verificator must be configured in the very same properties format as the <<endp-rest-jwt>> uses. 

